{
    "swagger": "2.0",
    "info": {
        "description": "Fizzbuzz REST API",
        "title": "Go Fizzbuzz REST API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/fizzbuzz": {
            "get": {
                "description": "Record request inside persistent repository and returns a list of strings with numbers from 1 to limit, where: all multiples of int1 are replaced by str1, all multiples of int2 are replaced by str2, all multiples of int1 and int2 are replaced by str1str2",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fizzbuzz"
                ],
                "summary": "Record and compute request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Integer1",
                        "name": "int1",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Integer2",
                        "name": "int2",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "String1",
                        "name": "str1",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "String2",
                        "name": "str2",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "Return the most used request, as well as the number of hits for this request",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fizzbuzz"
                ],
                "summary": "Process the most frequent request",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Statistics"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Statistics": {
            "type": "object",
            "properties": {
                "hits": {
                    "type": "integer"
                },
                "int1": {
                    "type": "integer"
                },
                "int2": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "str1": {
                    "type": "string"
                },
                "str2": {
                    "type": "string"
                }
            }
        }
    }
}